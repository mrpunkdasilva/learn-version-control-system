# Git Pie: Aprenda sobre VCS

![American pie](images/american-pie.gif)

## Nota do Autor

Ol√° pessoas, nesse texto irei falar sobre VCS (Sistema de Versionamento de C√≥digo, sigla em ingl√™s) ou melhor, como o tema √© mais conhecido - falarei sobre Git.

## O que voc√™ vai aprender aqui?

Tip:

![Stifler teaching](images/stifler-teaching.gif)
"Deixa que o Stifler te explica essa parada!"

Nesse guia voc√™ vai aprender:

* Como n√£o perder c√≥digo igual perdeu aquela crush do ensino m√©dio

* Como trabalhar em equipe sem querer matar seus colegas

* Como versionar c√≥digo igual um profissional (e n√£o usando `projeto-final-v3-agora-vai-mesmo.zip`)

* Como usar Git e n√£o passar vergonha nas entrevistas de emprego

## Roadmap de Aprendizado

Tip:

![American pie road](images/american-pie-road.gif)
A estrada do conhecimento √© longa, mas √© divertida!

```MERMAID
graph TD
    A[Voc√™ est√° aqui!] --> B[Fundamentos de VCS]
    B --> C[Git B√°sico]
    C --> D[Workflow do Git]
    D --> E[Branches e Merges]
    E --> F[Git Remoto]
    F --> G[Pr√°ticas Avan√ßadas]
    G --> H[Voc√™ virando um Git Master!]
```

## Mapa Mental dos Conceitos

Tip:

Para voc√™ que gosta de ver o todo antes de se perder nos detalhes
(tipo quando voc√™ olha o card√°pio inteiro antes de pedir)

```MERMAID
mindmap
  root((Git))
    (Fundamentos)
      [Versionamento]
      [Reposit√≥rios]
      [Commits]
    (Comandos B√°sicos)
      [init]
      [add]
      [commit]
      [status]
    (Branches)
      [Criar]
      [Mudar]
      [Mesclar]
    (Remoto)
      [clone]
      [push]
      [pull]
```

## Por que voc√™ deveria aprender Git?

Tip:

![Stifler convinced](images/stifler-convinced.gif)
"Confia no pai que essa √© boa!"

Imagina s√≥:

* Voc√™ t√° l√°, codando tranquilo

* Fez altera√ß√µes MASSAS no projeto

* A√≠ seu PC resolve dar aquela travada marota

* E... BOOM! üí• Perdeu tudo!

Ou pior:

* Voc√™ e seu amigo precisam trabalhar no mesmo projeto

* Voc√™s ficam trocando arquivo por WhatsApp

* `projeto_final.zip`, `projeto_final_v2.zip`, `projeto_final_v2_agora_vai.zip`

* No final ningu√©m sabe qual √© a vers√£o certa ü§¶‚Äç‚ôÇÔ∏è

√â a√≠ que entra o Git! Ele √© tipo aquele amigo que:

* Guarda todas as vers√µes do seu c√≥digo

* Deixa voc√™ voltar no tempo quando der m*rda

* Permite que voc√™ e seus amigos trabalhem juntos sem criar caos

* Te salva de passar vergonha em entrevistas de emprego

## Pr√©-requisitos

Tip:

![Jim thinking](images/jim-thinking.gif)
"O que eu preciso saber antes de come√ßar?"

* Saber usar um terminal b√°sico (tipo `cd`, `ls`, essas coisas)

* Ter um editor de c√≥digo (VSCode, Sublime, ou qualquer outro que voc√™ curta)

* Vontade de aprender (e senso de humor para aguentar minhas piadas ruins)

## Como usar este guia

Este material est√° organizado de forma progressiva:

1. Come√ßamos com o b√°sico dos b√°sicos

2. Vamos evoluindo aos poucos

3. No final voc√™ estar√° usando Git igual um profissional

Tip:

Dica do Stifler: N√£o pule etapas! √â tipo American Pie, voc√™ precisa ver o primeiro filme antes de entender as piadas do segundo!

## Bora come√ßar?

Tip:

![Lets do this](images/lets-do-this.gif)
√â hora de botar a m√£o na massa!

Escolha sua aventura:

* [Fundamentos de Versionamento](version-control-basics.html) - Para entender o b√°sico

* [Hist√≥ria do Git](git-history.html) - Para os curiosos

* [Git na Pr√°tica](git-workflow.html) - Para quem quer ir direto ao c√≥digo

Tip:

Nota: Se em algum momento voc√™ se perder, n√£o se preocupe!
√â normal, todo mundo j√° passou por isso.
At√© o Stifler j√° perdeu c√≥digo antes de aprender Git!



# Conceitos B√°sicos de Versionamento

## Versionamento de C√≥digo

Versionamento √© um conceito muito simples e usado no dia a dia de forma que nem percebemos. Por exemplo:
Estamos em um projeto onde temos dois desenvolvedores:

* Stifler

Tip:

![Stifler dude no](images/stifler-dude-no.gif)

* Jim

Tip:

![Jim american pie](images/jim-american-pie.gif)

Esses dois desenvolvedores est√£o fazendo o "Milfs Go" uma especie revolucionaria e inovadora, al√©m do tempo sendo um app para acharem a "milfs".

Tip:

Aqui est√° uma milf para aqueles n√£o habituados com o termo:

![American pie good stuff](images/american-pie-good-stuff.gif)

## Controle de Vers√£o

Versionamento √© o ato de manipular vers√µes, agora o Controle de Vers√£o √© um sistema que vai registrar as mudan√ßas tanto num arquivo como em um projeto gigante ao longo do tempo.

## Import√¢ncia

Talvez agora voc√™ levante uma quest√£o de o porque aprender "este trem" - como diria um amigo mineiro. Logo, a resposta √© simples: esse tipo de ferramenta √© essencial para o desenvolvimento j√° que nos entrega um poder de n√£o somente trabalhar em conjunto de forma ass√≠ncrona e sem medo de acabar perdendo o que j√° foi feito.



# Tipos de Sistemas de Controle de Vers√£o

## Sistemas Locais

Esse tipo de sistema √© mantido em uma maquina. Por exemplo, Jim vai fazer o versionamento da sua parte do frontend, onde ele possui um arquivo de checkout que vai servir para conferir/adicionar as vers√µes e um banco de dados (poderia ser um outro arquivo) contento as vers√µes que ele salvou.

Tip:

![Version control system sistema local](images/Version-Control-System-sistema-local.png)
* Diagrama de um sistema local

## Sistemas Centralizados

Estes sistemas nascem com a problem√°tica que o Sistema Local tr√°s que √© justamente um n√£o compartilhamento simult√¢neo, j√° que como no nosso exemplo esses dois teriam problemas de vers√µes j√° que estar√£o em computadores diferentes.

Tip:

![Version control system sistema compartilhado](images/Version-Control-System-sistema-compartilhado.png)
* Diagrama de um sistema compartilhado

## Sistemas Distribu√≠dos

Com isso os DVCS (Sistemas de Controle de Vers√£o Distribu√≠dos) se tornam um protagonista, j√° que os clientes n√£o somente clonam os estados atuais, mas tamb√©m fazem uma c√≥pia completa de todo o reposit√≥rio localmente.

Tip:

![Version control system sistemasdistribuidos](images/Version-Control-System-sistemasdistribuidos.png)
* Diagrama de um sistema distribu√≠do



# Hist√≥ria do Git

![The simpsons homer](images/the-simpsons-homer.gif)

Para come√ßar a historia do Git √© at√© bem curta e direta. A comunidade do Linux usava um VCS distribu√≠do chamado BitKeeper s√≥ que ele √© propriet√°rio.

Sim, um sistema open source usando um propriet√°rio. Claramente isso era algo que causava um estranhamento na comunidade.

Tip:

![Stifler kiss](images/stifler-kiss.gif)

Que por sua vez chegou ao √°pice quando o BitKeeper se tornou pago, logo a comunidade do Linux ficou alerta j√° que eles teriam que fazer o versionamento do n√∫cleo do Linux em outro sistema.

Assim ent√£o a comunidade come√ßou a criar seu pr√≥prio VCS que fosse:

* Simples

* Veloz

* N√£o linear, ou seja, que aceite v√°rios ramos (branches) de modifica√ß√£o

* Capaz de lidar com grandes projetos, afinal, Linux √© gigante

E assim nasceu o Git, exatamente em 2005 e at√© hoje est√° em evolu√ß√£o sendo um dos VCS mais utilizados em todo o mundo de desenvolvimento de gambiarras (softwares).

Tip:

Ou seja, tudo nasceu de uma revolta popular

![Cachorro comuna](images/cachorro-comuna.png)



# Conceitos B√°sicos do Git

## Como o Git Funciona

O Git funciona de forma diferente de outros VCS. Em um outro VCS ele ter√° os arquivos e quando houver altera√ß√£o eles criam uma lista somente das altera√ß√µes.

Em um outro VCS ele ter√° os arquivos e quando houver altera√ß√£o eles criam uma lista somente  das altera√ß√µes:

Tip:

![Version control system basico outros vcs](images/Version-Control-System-basico-outros-vcs.png)

Agora com o Git ele faz diferente, j√° que vai tirando snapshots que s√£o como fotos quando ocorre uma mudan√ßa e caso tenha algum arquivo que n√£o foi alterado ser√° guardado uma referencia para ele, assim pode ser recuperado.

## Estrutura de Diret√≥rios

Assim temos dois n√≠veis principais:

* Diret√≥rio de trabalho

* √Årea de preparo

* Diret√≥rio `.git` que vai ser o reposit√≥rio ou banco de dados local

Tip:

![Version control system fluxodetrabalho](images/Version-Control-System-fluxodetrabalho.png)
Diret√≥rios quando se trabalha com Git



# Fluxo de Trabalho do Git

## Iniciando um Reposit√≥rio

Devemos usar o comando abaixo para iniciar o reposit√≥rio para que o Git consiga ver os arquivos.

```BASH
md MilfsGo # Cria a pasta
cd MilfsGo # acessa a pasta
git init
```

## Fazendo Altera√ß√µes

Agora vamos fazer altera√ß√µes b√°sicas como adicionar um README para o projeto.

Tip:

README s√£o arquivos geralmente em markdown (.md) para registrar a documenta√ß√£o do reposit√≥rio com informa√ß√µes importantes como:

* Nome

* Descri√ß√£o

* Como usar

* Etc

## Verificando Status

```BASH
git status
```

Tip:

![Version control system gitstatus](images/Version-Control-System-gitstatus.png)
Resultado da execu√ß√£o do comando



# Comandos Essenciais do Git

## Cheat Sheet (Tabela de pregui√ßoso)

Tip:

![American pie its not what it looks like](images/american-pie-its-not-what-it-looks-like.gif)

Essa tabela fornece uma vis√£o geral dos principais comandos Git e suas funcionalidades b√°sicas.

| Comando Git |Descri√ß√£o |
--------------------------
| `git init` |Inicializa um novo reposit√≥rio Git |
| `git add <arquivo>` |Adiciona um arquivo modificado √† √°rea de stage |
| `git add .` |Adiciona todos os arquivos modificados √† √°rea de stage |
| `git commit -m "Mensagem do commit"` |Cria um novo commit com a mensagem especificada |
| `git mv <arquivo-original> <arquivo-novo>` |Renomeia ou move um arquivo no reposit√≥rio |



# Links e Refer√™ncias

* GIT-SCM.COM. Git - Documentation. Dispon√≠vel em: [https://git-scm.com/doc](https://git-scm.com/doc).

* YOUTUBE. YouTube. Dispon√≠vel em: [https://www.youtube.com/watch?v=un8CDE8qOR8](https://www.youtube.com/watch?v=un8CDE8qOR8).

* GITLAB. GitLab Documentation. Dispon√≠vel em: [https://docs.gitlab.com/](https://docs.gitlab.com/).

* GITHUB. Git Cheat Sheet. Dispon√≠vel em: [https://education.github.com/git-cheat-sheet-education.pdf](https://education.github.com/git-cheat-sheet-education.pdf).



