# Git Pie: Aprenda sobre VCS

![American pie](images/american-pie.gif)

## Nota do Autor

Ol√° pessoas, nesse texto irei falar sobre VCS (Sistema de Versionamento de C√≥digo, sigla em ingl√™s) ou melhor, como o tema √© mais conhecido - falarei sobre Git.

## O que voc√™ vai aprender aqui?

Tip:

![Stifler teaching](images/stifler-teaching.gif)
"Deixa que o Stifler te explica essa parada!"

Nesse guia voc√™ vai aprender:

* Como n√£o perder c√≥digo igual perdeu aquela crush do ensino m√©dio

* Como trabalhar em equipe sem querer matar seus colegas

* Como versionar c√≥digo igual um profissional (e n√£o usando `projeto-final-v3-agora-vai-mesmo.zip`)

* Como usar Git e n√£o passar vergonha nas entrevistas de emprego

## Roadmap de Aprendizado

Tip:

![American pie road](images/american-pie-road.gif)
A estrada do conhecimento √© longa, mas √© divertida!

```MERMAID
graph TD
    A[Voc√™ est√° aqui!] --> B[Fundamentos de VCS]
    B --> C[Git B√°sico]
    C --> D[Workflow do Git]
    D --> E[Branches e Merges]
    E --> F[Git Remoto]
    F --> G[Pr√°ticas Avan√ßadas]
    G --> H[Voc√™ virando um Git Master!]
```

## Mapa Mental dos Conceitos

Tip:

Para voc√™ que gosta de ver o todo antes de se perder nos detalhes
(tipo quando voc√™ olha o card√°pio inteiro antes de pedir)

```MERMAID
mindmap
  root((Git))
    (Fundamentos)
      [Versionamento]
      [Reposit√≥rios]
      [Commits]
    (Comandos B√°sicos)
      [init]
      [add]
      [commit]
      [status]
    (Branches)
      [Criar]
      [Mudar]
      [Mesclar]
    (Remoto)
      [clone]
      [push]
      [pull]
```

## Por que voc√™ deveria aprender Git?

Tip:

![Stifler convinced](images/stifler-convinced.gif)
"Confia no pai que essa √© boa!"

Imagina s√≥:

* Voc√™ t√° l√°, codando tranquilo

* Fez altera√ß√µes MASSAS no projeto

* A√≠ seu PC resolve dar aquela travada marota

* E... BOOM! üí• Perdeu tudo!

Ou pior:

* Voc√™ e seu amigo precisam trabalhar no mesmo projeto

* Voc√™s ficam trocando arquivo por WhatsApp

* `projeto_final.zip`, `projeto_final_v2.zip`, `projeto_final_v2_agora_vai.zip`

* No final ningu√©m sabe qual √© a vers√£o certa ü§¶‚Äç‚ôÇÔ∏è

√â a√≠ que entra o Git! Ele √© tipo aquele amigo que:

* Guarda todas as vers√µes do seu c√≥digo

* Deixa voc√™ voltar no tempo quando der m*rda

* Permite que voc√™ e seus amigos trabalhem juntos sem criar caos

* Te salva de passar vergonha em entrevistas de emprego

## Pr√©-requisitos

Tip:

![Jim thinking](images/jim-thinking.gif)
"O que eu preciso saber antes de come√ßar?"

* Saber usar um terminal b√°sico (tipo `cd`, `ls`, essas coisas)

* Ter um editor de c√≥digo (VSCode, Sublime, ou qualquer outro que voc√™ curta)

* Vontade de aprender (e senso de humor para aguentar minhas piadas ruins)

## Como usar este guia

Este material est√° organizado de forma progressiva:

1. Come√ßamos com o b√°sico dos b√°sicos

2. Vamos evoluindo aos poucos

3. No final voc√™ estar√° usando Git igual um profissional

Tip:

Dica do Stifler: N√£o pule etapas! √â tipo American Pie, voc√™ precisa ver o primeiro filme antes de entender as piadas do segundo!

## Bora come√ßar?

Tip:

![Lets do this](images/lets-do-this.gif)
√â hora de botar a m√£o na massa!

Escolha sua aventura:

* [Fundamentos de Versionamento](version-control-basics.html) - Para entender o b√°sico

* [Hist√≥ria do Git](git-history.html) - Para os curiosos

* [Git na Pr√°tica](git-workflow.html) - Para quem quer ir direto ao c√≥digo

Tip:

Nota: Se em algum momento voc√™ se perder, n√£o se preocupe!
√â normal, todo mundo j√° passou por isso.
At√© o Stifler j√° perdeu c√≥digo antes de aprender Git!



# Conceitos B√°sicos de Versionamento

## Versionamento de C√≥digo

Versionamento √© um conceito muito simples e usado no dia a dia de forma que nem percebemos. Por exemplo:
Estamos em um projeto onde temos dois desenvolvedores:

* Stifler

Tip:

![Stifler dude no](images/stifler-dude-no.gif)

* Jim

Tip:

![Jim american pie](images/jim-american-pie.gif)

Esses dois desenvolvedores est√£o fazendo o "Milfs Go" uma especie revolucionaria e inovadora, al√©m do tempo sendo um app para acharem a "milfs".

Tip:

Aqui est√° uma milf para aqueles n√£o habituados com o termo:

![American pie good stuff](images/american-pie-good-stuff.gif)

## Controle de Vers√£o

Versionamento √© o ato de manipular vers√µes, agora o Controle de Vers√£o √© um sistema que vai registrar as mudan√ßas tanto num arquivo como em um projeto gigante ao longo do tempo.

### Tipos de Controle de Vers√£o

1. Local

* Mant√©m as vers√µes apenas na sua m√°quina

* Simples mas limitado

* Exemplo: copiar e renomear arquivos

2. Centralizado

* Um servidor central guarda todas as vers√µes

* Todos se conectam a este servidor

* Exemplo: SVN

3. Distribu√≠do

* Cada desenvolvedor tem uma c√≥pia completa

* Trabalho offline poss√≠vel

* Exemplo: Git

## Import√¢ncia

Talvez agora voc√™ levante uma quest√£o de o porque aprender "este trem" - como diria um amigo mineiro. Logo, a resposta √© simples: esse tipo de ferramenta √© essencial para o desenvolvimento j√° que nos entrega um poder de n√£o somente trabalhar em conjunto de forma ass√≠ncrona e sem medo de acabar perdendo o que j√° foi feito.

### Benef√≠cios do Controle de Vers√£o

1. Hist√≥rico Completo

* Rastreamento de todas as mudan√ßas

* Quem fez o qu√™ e quando

* Possibilidade de reverter altera√ß√µes

2. Trabalho em Equipe

* M√∫ltiplos desenvolvedores

* Desenvolvimento paralelo

* Resolu√ß√£o de conflitos

3. Backup

* C√≥pia segura do c√≥digo

* Recupera√ß√£o de desastres

* M√∫ltiplas c√≥pias distribu√≠das

## Fluxo B√°sico

1. Modifica√ß√£o

* Altera√ß√£o nos arquivos

* Cria√ß√£o de novos arquivos

* Exclus√£o de arquivos

2. Stage

* Prepara√ß√£o das mudan√ßas

* Sele√ß√£o do que ser√° versionado

* Organiza√ß√£o das altera√ß√µes

3. Commit

* Confirma√ß√£o das mudan√ßas

* Cria√ß√£o do ponto de vers√£o

* Registro no hist√≥rico

## Boas Pr√°ticas

1. Commits Frequentes

* Mudan√ßas pequenas e focadas

* Mais f√°cil de entender e reverter

* Melhor rastreabilidade

2. Mensagens Claras

* Descreva o que foi alterado

* Seja conciso mas informativo

* Use tempo verbal consistente

3. Branches Organizados

* Separe features em branches

* Mantenha o main/master est√°vel

* Merge apenas c√≥digo testado

## Pr√≥ximos Passos

Agora que voc√™ entende os conceitos b√°sicos, est√° pronto para:

* Aprender comandos espec√≠ficos do Git

* Entender branches e merges

* Trabalhar com reposit√≥rios remotos

[Pr√≥ximo Cap√≠tulo: Git B√°sico](git-basics.html)

Tip:

Dica: Mantenha este cap√≠tulo como refer√™ncia!
Os conceitos b√°sicos s√£o fundamentais para entender
as opera√ß√µes mais avan√ßadas que vir√£o pela frente.



# Tipos de Sistemas de Controle de Vers√£o

## Sistemas Locais

Imagine que o Stifler est√° tentando escrever a "b√≠blia das milfs" em seu computador. Toda vez que ele faz uma altera√ß√£o importante, cria uma nova pasta chamada "vers√£o_final", "vers√£o_final_2", "vers√£o_final_2_agora_vai"... Isso √© basicamente um sistema local de controle de vers√£o!

### Caracter√≠sticas dos Sistemas Locais

* Simplicidade: T√£o simples quanto renomear arquivos

* Independ√™ncia: Funciona offline, como o Stifler escrevendo sozinho em casa

* Limita√ß√µes: Se o HD queimar, tchau b√≠blia das milfs

* Risco: Um problema no computador e todo o hist√≥rico se perde

Tip:

![Version control system sistema local](images/Version-Control-System-sistema-local.png)
Diagrama de um sistema local (ou como Stifler organiza seus arquivos)

### Analogia da Festa

√â como fazer uma festa sozinho. Voc√™ tem todo o controle, mas:

* Ningu√©m mais participa

* Se sua casa pegar fogo, acabou a festa

* Voc√™ n√£o pode estar em dois lugares ao mesmo tempo

## Sistemas Centralizados

Agora imagine que Jim e Stifler decidem trabalhar juntos no "Milfs Go". Eles precisam de um lugar central para guardar o c√≥digo - tipo a casa da m√£e do Stifler (que ironicamente √© uma milf).

### Como Funciona

* Um servidor central (a casa da m√£e do Stifler)

* Todos os desenvolvedores se conectam a ele

* Precisa de internet para trabalhar

### Desvantagens dos Sistemas Centralizados

* Ponto √∫nico de falha: Se a m√£e do Stifler sair de casa, ningu√©m trabalha

* Depend√™ncia de rede: Sem internet, sem c√≥digo

* Performance: Lento como Stifler tentando resolver c√°lculo

* Conflitos: Como Jim e Stifler brigando pelo mesmo arquivo

Tip:

![Version control system sistema compartilhado](images/Version-Control-System-sistema-compartilhado.png)
Diagrama de um sistema centralizado (ou a casa da m√£e do Stifler)

### Analogia da Festa Centralizada

√â como uma festa na casa da m√£e do Stifler:

* Todo mundo precisa ir at√© l√°

* Se a casa fechar, acabou a festa

* S√≥ d√° para fazer as coisas se voc√™ estiver l√°

## Sistemas Distribu√≠dos

Finalmente, temos o sistema que √© tipo a internet das milfs - todo mundo tem uma c√≥pia completa de tudo!

### Por que √© Melhor?

* Trabalho offline: Como Stifler "estudando" em casa

* Backup distribu√≠do: Cada c√≥pia √© um backup completo

* Performance: R√°pido como Stifler correndo atr√°s de... voc√™ sabe

* Flexibilidade: M√∫ltiplos fluxos de trabalho poss√≠veis

### Analogia da Festa Distribu√≠da

√â como ter v√°rias festas simult√¢neas:

* Cada um pode ter sua pr√≥pria festa

* As festas podem se sincronizar

* Se uma festa acabar, as outras continuam

### Caracter√≠sticas Avan√ßadas

1. Branches Distribu√≠dos

* Como diferentes cap√≠tulos do "Milfs Go"

* Cada um trabalha no seu

* Depois junta tudo

2. Colabora√ß√£o

* Pull requests (como pedir permiss√£o para a m√£e do Stifler)

* Code review (Jim revisando as besteiras do Stifler)

* Forks (fazer sua pr√≥pria vers√£o do "Milfs Go")

### Tabela Comparativa Estilo American Pie

| Caracter√≠stica |Local |Centralizado |Distribu√≠do |
----------------------------------------------------
| Backup |Fr√°gil como o ego do Stifler |M√©dio |Forte como a m√£e do Stifler |
| Colabora√ß√£o |Solo |Limitada |Total |
| Offline |Sim |N√£o |Sim |
| Complexidade |F√°cil |M√©dia |Complexa |
| Confiabilidade |Baixa |M√©dia |Alta |

## Exemplos Hist√≥ricos

### Sistemas Locais (Anos 80)

* RCS: O vov√¥ dos sistemas de vers√£o

* SCCS: Ainda mais velho que a m√£e do Stifler

### Sistemas Centralizados (Anos 90-2000)

* SVN: O pai dos sistemas centralizados

* CVS: O tio que ningu√©m mais visita

* Perforce: O primo rico

### Sistemas Distribu√≠dos (2005+)

* Git: O rei da festa

* Mercurial: O amigo legal que ningu√©m lembra

* Bazaar: Aquele que tentou mas n√£o vingou

## Conclus√£o

Escolher um sistema de controle de vers√£o √© como escolher onde fazer a festa:

* Na sua casa (Local)

* Na casa da m√£e do Stifler (Centralizado)

* Em todas as casas ao mesmo tempo (Distribu√≠do)

Tip:

Stifler aprovando sistemas distribu√≠dos

## Nota Final

Lembre-se: assim como Stifler aprendeu a respeitar as milfs, voc√™ precisa respeitar seu sistema de controle de vers√£o. Escolha sabiamente!

Tip:

E viveram felizes para sempre com Git



# Sistemas de Controle de Vers√£o Local

Um sistema de controle de vers√£o local √© a primeira e mais b√°sica forma de versionamento de c√≥digo. Imagine como uma m√°quina do tempo pessoal para seu c√≥digo, onde todas as mudan√ßas s√£o registradas e armazenadas localmente no seu computador.

## Como Funciona na Pr√°tica

```MERMAID
graph TD
    A[Seus Arquivos] -->|1. Modifica√ß√£o| B[Arquivos Modificados]
    B -->|2. Snapshot| C[Base de Dados Local]
    C -->|3. Registro| D[Hist√≥rico de Vers√µes]
    D -->|4. Recupera√ß√£o| A
```

### Analogia com um √Ålbum de Fotos

```
+------------------------+
|     Seu Projeto       |
|  +-----------------+  |
|  | Vers√£o Atual    |  |
|  +-----------------+  |
|  | Vers√£o Anterior |  |
|  +-----------------+  |
|  | Vers√µes Antigas |  |
|  +-----------------+  |
+------------------------+
```

## Componentes Principais

### 1. Base de Dados Local

* Armazena todas as mudan√ßas

* Mant√©m metadados (autor, data, descri√ß√£o)

* Gerencia diferentes vers√µes

* Organiza o hist√≥rico completo

### 2. Sistema de Tracking

```MERMAID
graph LR
    A[Arquivo Original] -->|Delta V1| B[Vers√£o 1]
    B -->|Delta V2| C[Vers√£o 2]
    C -->|Delta V3| D[Vers√£o 3]
    
    style A fill:#f9f,stroke:#333
    style B fill:#bbf,stroke:#333
    style C fill:#bbf,stroke:#333
    style D fill:#bbf,stroke:#333
```

### 3. Mecanismo de Snapshots

```
Tempo ------>

V1  [Snapshot 1]
    |
V2  [Snapshot 2]
    |
V3  [Snapshot 3]
    |
V4  [Snapshot 4]
```

## Cen√°rios de Uso

### 1. Desenvolvimento Solo

```MERMAID
sequenceDiagram
    participant Dev
    participant Local
    participant Backup
    
    Dev->>Local: Desenvolve feature
    Local->>Local: Salva vers√£o
    Local->>Backup: Backup peri√≥dico
    Dev->>Local: Reverte se necess√°rio
```

### 2. Projetos Pessoais

```
+-------------------+
| Projeto Pessoal   |
|                   |
| + C√≥digo         |
| + Documenta√ß√£o   |
| + Recursos      |
| + Configura√ß√µes |
+-------------------+
      |
      v
+-------------------+
| Sistema Local VCS |
+-------------------+
```

## Processo de Versionamento

### 1. Cria√ß√£o de Vers√µes

```MERMAID
stateDiagram-v2
    [*] --> Modificado
    Modificado --> Staged: Adiciona
    Staged --> Commitado: Commit
    Commitado --> Modificado: Nova mudan√ßa
```

### 2. Recupera√ß√£o de Vers√µes

```
HEAD (Vers√£o Atual)
    |
    v
[V3] --> [V2] --> [V1]
    ^
    |
  Checkout
```

## Vantagens Detalhadas

### 1. Simplicidade

* F√°cil de configurar

* Sem depend√™ncias externas

* Interface simples

* Aprendizado r√°pido

### 2. Performance

```MERMAID
graph LR
    A[Opera√ß√£o] -->|Local| B[Resultado]
    style A fill:#f9f,stroke:#333
    style B fill:#bbf,stroke:#333
```

### 3. Autonomia

* Trabalho offline

* Controle total

* Independ√™ncia de rede

* Decis√µes imediatas

## Limita√ß√µes Detalhadas

### 1. Riscos de Perda

```MERMAID
graph TD
    A[Falha de Hardware] -->|Perda| B[Dados Locais]
    C[Sem Backup] -->|Risco| B
    D[Erro Humano] -->|Dano| B
```

### 2. Colabora√ß√£o Limitada

```
Desenvolvedor 1     Desenvolvedor 2
     |                   |
  Vers√£o A            Vers√£o B
     |                   |
     X------------------X
     |                   |
Imposs√≠vel Sincronizar
```

## Ferramentas Populares

### 1. RCS (Revision Control System)

```MERMAID
graph TD
    A[Arquivo] -->|check-out| B[Workspace]
    B -->|check-in| C[RCS Database]
    C -->|retrieve| A
```

### 2. SCCS (Source Code Control System)

```
+------------------+
| SCCS Structure   |
|                  |
| s.file1          |
| s.file2          |
| s.file3          |
+------------------+
```

## Melhores Pr√°ticas

### 1. Organiza√ß√£o

```MERMAID
graph TD
    A[Projeto] -->|Organiza| B[M√≥dulos]
    B -->|Versiona| C[Componentes]
    C -->|Documenta| D[Hist√≥rico]
```

### 2. Backup Regular

```
+----------------+
| Projeto Local  |
+----------------+
        |
        v
+----------------+
| Backup Externo |
+----------------+
        |
        v
+----------------+
| Cloud Storage  |
+----------------+
```

### 3. Documenta√ß√£o

* Coment√°rios claros

* Descri√ß√µes de vers√£o

* Registro de mudan√ßas

* Notas de implementa√ß√£o

```

```



# Sistemas de Controle de Vers√£o Centralizado

## A Casa da M√£e do Stifler

Como uma festa na casa da m√£e do Stifler, todos precisam ir ao mesmo lugar para participar!

### Arquitetura

```MERMAID
graph TD
    S((Servidor Central)) --- C1[Cliente 1]
    S --- C2[Cliente 2]
    S --- C3[Cliente 3]
    S --- C4[Cliente N]
```

### Estrutura do Sistema

```
      +----------------+
      |    Servidor    |
      |    Central     |
      +----------------+
            ||||
    +-------++-+-------+
    |        |         |
+-------+ +-------+ +-------+
|Cliente| |Cliente| |Cliente|
|   1   | |   2   | |   3   |
+-------+ +-------+ +-------+
```

### Fluxo de Opera√ß√µes

```MERMAID
sequenceDiagram
    participant D as Dev
    participant L as Local
    participant S as Servidor
    D->>L: Checkout
    L->>S: Update
    D->>L: Modifica
    L->>S: Commit
    S->>L: Confirma
```

### Exemplos Famosos

```MERMAID
mindmap
    root((VCS Centralizado))
        SVN
            Apache
            Multiplataforma
            Confi√°vel
        CVS
            Legado
            Unix
            Hist√≥rico
```



# Sistemas de Controle de Vers√£o Distribu√≠do

## A Rede Social das Milfs

Como uma rede social onde todo mundo tem sua pr√≥pria c√≥pia de tudo!

### Conceito

```MERMAID
graph TD
    A((Repo Central)) --- B((Dev 1))
    A --- C((Dev 2))
    A --- D((Dev 3))
    B --- C
    C --- D
    D --- B
```

### Estrutura Distribu√≠da

```
    +----------------+
    |  Reposit√≥rio   |
    |    Remoto      |
    +----------------+
     /      |       \
+-------+ +-----+ +-------+
| Clone | |Clone| | Clone |
|   1   | |  2  | |   3   |
+-------+ +-----+ +-------+
```

### Fluxo de Trabalho

```MERMAID
sequenceDiagram
    participant L as Local
    participant R as Remote
    participant O as Other Dev
    L->>R: Push
    R->>O: Pull
    O->>R: Push
    R->>L: Pull
```

### Sistemas Populares

```MERMAID
mindmap
    root((DVCS))
        Git
            GitHub
            GitLab
            Bitbucket
        Mercurial
            Facebook
            Mozilla
```



# Comparando Sistemas de Controle de Vers√£o

## Battle Royale dos Sistemas

Como uma competi√ß√£o entre as melhores festas da cidade, vamos ver quem se sai melhor!

### Tabela Comparativa Completa

| Caracter√≠stica |Local |Centralizado |Distribu√≠do |
----------------------------------------------------
| Velocidade |Muito R√°pida |Depende da Rede |R√°pida |
| Colabora√ß√£o |Imposs√≠vel |Limitada |Ilimitada |
| Backup |Nenhum |√önico |M√∫ltiplos |
| Complexidade |Simples |M√©dia |Alta |
| Offline |Sempre |Nunca |Sempre |
| Aprendizado |F√°cil |M√©dio |Dif√≠cil |
| Conflitos |Nenhum |Comuns |Gerenci√°veis |

### Cen√°rios de Uso

1. Projeto Solo

* Sistema Local

* Como estudar sozinho

2. Equipe Pequena

* Centralizado ou Distribu√≠do

* Como uma festa √≠ntima

3. Projeto Grande

* Distribu√≠do

* Como um festival



# Hist√≥ria do Controle de Vers√£o

## A Linha do Tempo das Festas

### Anos 70-80: A Pr√©-Hist√≥ria

* SCCS (1972) * O primeiro sistema * Mais velho que a m√£e do Stifler * Unix only

* RCS (1982) * Evolu√ß√£o do SCCS * Ainda usado em alguns lugares * Mais simples que a primeira festa

### Anos 90: A Era Centralizada

* CVS (1990) * O primeiro sistema popular * Como a primeira festa grande * Revolucionou o desenvolvimento

* SVN (2000) * O sucessor do CVS * Mais organizado * Ainda muito usado

### Anos 2000+: A Revolu√ß√£o Distribu√≠da

* Git (2005) * Criado por Linus Torvalds * Para o kernel do Linux * A maior festa de todas

* Mercurial (2005) * Competidor do Git * Mais amig√°vel * Festa alternativa



# Controle de Vers√£o Moderno

## A Festa Continua!

### Tend√™ncias Atuais

1. Integra√ß√£o com Cloud

* GitHub/GitLab/Bitbucket

* Como festas online

* Sempre dispon√≠vel

2. CI/CD Integration

* Automa√ß√£o de testes

* Deploy autom√°tico

* Festa sem trabalho manual

3. Ferramentas Gr√°ficas

* GitKraken

* SourceTree

* Interface amig√°vel

### O Futuro

1. IA e Machine Learning

* Resolu√ß√£o autom√°tica de conflitos

* Sugest√µes de c√≥digo

* Como ter um DJ autom√°tico

2. Blockchain

* Versionamento descentralizado

* Imutabilidade

* A pr√≥xima revolu√ß√£o?

### Melhores Pr√°ticas Modernas

1. Trunk-Based Development

* Integra√ß√£o cont√≠nua

* Deploys frequentes

* Festa sem fim

2. Feature Flags

* Controle de funcionalidades

* Testes em produ√ß√£o

* Como VIP da festa



# Fluxos de Trabalho em Versionamento

## Modelos de Fluxo de Trabalho

### Trunk-Based Development

* Desenvolvimento direto na branch principal

* Integra√ß√£o cont√≠nua frequente

* Ideal para equipes pequenas e √°geis

### Feature Branch Workflow

* Branch separada para cada feature

* Merge atrav√©s de pull requests

* Revis√£o de c√≥digo facilitada

### Gitflow

* Branches espec√≠ficas para features, releases e hotfixes

* Estrutura mais rigorosa

* Ideal para releases planejadas

### Forking Workflow

* Fork do reposit√≥rio principal

* Comum em projetos open source

* Maior isolamento entre contribui√ß√µes

## Escolhendo um Workflow

### Fatores a Considerar

* Tamanho da equipe

* Frequ√™ncia de releases

* Complexidade do projeto

* Necessidades de QA

### Exemplos Pr√°ticos

```MERMAID
graph TD
    A[Feature Branch] --> B[Code Review]
    B --> C[Testes]
    C --> D[Merge para Main]
    D --> E[Deploy]
```

## Boas Pr√°ticas

1. Commits frequentes e pequenos

2. Mensagens de commit claras

3. Code review regular

4. Testes antes do merge

5. Documenta√ß√£o atualizada

## Ferramentas de Suporte

* CI/CD pipelines

* Code review platforms

* Issue trackers

* Automa√ß√£o de testes



# Melhores Pr√°ticas em Controle de Vers√£o

## Organiza√ß√£o de Reposit√≥rio

### Estrutura de Diret√≥rios

```
projeto/
‚îú‚îÄ‚îÄ src/
‚îú‚îÄ‚îÄ tests/
‚îú‚îÄ‚îÄ docs/
‚îú‚îÄ‚îÄ .gitignore
‚îî‚îÄ‚îÄ README.md
```

### Arquivos Essenciais

* README.md

* .gitignore

* CONTRIBUTING.md

* LICENSE

## Commits

### Anatomia de um Bom Commit

* T√≠tulo claro e conciso

* Descri√ß√£o detalhada quando necess√°rio

* Refer√™ncia a issues/tickets

### Conven√ß√µes de Commit

```
feat: adiciona novo recurso
fix: corrige bug
docs: atualiza documenta√ß√£o
style: formata√ß√£o de c√≥digo
refactor: refatora√ß√£o de c√≥digo
test: adiciona/modifica testes
```

## Branches

### Nomenclatura

* feature/nome-da-feature

* bugfix/descricao-do-bug

* hotfix/correcao-urgente

* release/versao

### Estrat√©gias de Merge

* Merge commit

* Squash and merge

* Rebase and merge

## Code Review

### Checklist

* [ ] C√≥digo segue padr√µes

* [ ] Testes adicionados/atualizados

* [ ] Documenta√ß√£o atualizada

* [ ] Performance considerada

* [ ] Seguran√ßa verificada

### Feedback Construtivo

* Foco no c√≥digo, n√£o no desenvolvedor

* Sugest√µes espec√≠ficas

* Explica√ß√µes claras

* Reconhecimento de boas pr√°ticas



# Terminologia do Controle de Vers√£o

## Conceitos B√°sicos

### Repository (Reposit√≥rio)

Tip:

![Repo illustration](repo-illustration.png)

* Local onde o c√≥digo √© armazenado

* Cont√©m todo o hist√≥rico do projeto

* Pode ser local ou remoto

### Branch (Ramo)

* Linha independente de desenvolvimento

* Permite trabalho paralelo

* Isola mudan√ßas em desenvolvimento

### Commit (Confirma√ß√£o)

* Snapshot do c√≥digo em um momento

* Inclui mensagem descritiva

* Possui identificador √∫nico (hash)

## Opera√ß√µes Comuns

### Merge (Mesclagem)

* Combina mudan√ßas de diferentes branches

* Pode gerar conflitos

* Mant√©m hist√≥rico de ambas as branches

### Rebase (Rebase)

* Reaplica commits sobre outra base

* Mant√©m hist√≥rico linear

* √ötil para manter branches atualizadas

### Cherry-pick

* Aplica commits espec√≠ficos

* Seletivo e preciso

* √ötil para hotfixes

## Estados de Arquivos

### Tracked (Rastreado)

* Modified (Modificado)

* Staged (Preparado)

* Committed (Confirmado)

### Untracked (N√£o Rastreado)

* Arquivos novos

* N√£o inclu√≠dos no controle de vers√£o

* Precisam ser adicionados explicitamente

## Gloss√°rio Expandido

| Termo |Defini√ß√£o |
--------------------
| Clone |C√≥pia completa do reposit√≥rio |
| Fork |C√≥pia independente do reposit√≥rio |
| Pull Request |Solicita√ß√£o para integrar mudan√ßas |
| Tag |Marco espec√≠fico no hist√≥rico |
| Hook |Script automatizado em eventos |



# Seguran√ßa em Controle de Vers√£o

## Boas Pr√°ticas de Seguran√ßa

### Credenciais e Dados Sens√≠veis

* Nunca commitar senhas

* Usar vari√°veis de ambiente

* Implementar .gitignore adequado

### Exemplo de .gitignore

```GITIGNORE
# Arquivos de configura√ß√£o
.env
config.json
secrets.yaml

# Diret√≥rios sens√≠veis
private/
credentials/

# Logs e tempor√°rios
*.log
tmp/
```

## Controle de Acesso

### N√≠veis de Permiss√£o

1. Read (Leitura)

2. Write (Escrita)

3. Admin (Administra√ß√£o)

### Autentica√ß√£o

* Chaves SSH

* Tokens de acesso

* Autentica√ß√£o de dois fatores

## Vulnerabilidades Comuns

### Exposi√ß√£o de Dados

* Commits com dados sens√≠veis

* Hist√≥rico exposto

* Metadados reveladores

### Mitiga√ß√£o

1. Git-secrets

2. Pre-commit hooks

3. An√°lise de seguran√ßa automatizada

## Auditoria

### Logs e Monitoramento

* Registro de acessos

* Hist√≥rico de altera√ß√µes

* Alertas de seguran√ßa

### Ferramentas de An√°lise

* Git forensics

* Security scanners

* Dependency checkers

## Recupera√ß√£o

### Backup e Restaura√ß√£o

* Estrat√©gias de backup

* Procedimentos de recupera√ß√£o

* Testes regulares

### Incidentes de Seguran√ßa

1. Identifica√ß√£o

2. Conten√ß√£o

3. Remedia√ß√£o

4. Documenta√ß√£o



# Hist√≥ria do Git

![The simpsons homer](images/the-simpsons-homer.gif)

Para come√ßar a historia do Git √© at√© bem curta e direta. A comunidade do Linux usava um VCS distribu√≠do chamado BitKeeper s√≥ que ele √© propriet√°rio.

Sim, um sistema open source usando um propriet√°rio. Claramente isso era algo que causava um estranhamento na comunidade.

Tip:

![Stifler kiss](images/stifler-kiss.gif)

Que por sua vez chegou ao √°pice quando o BitKeeper se tornou pago, logo a comunidade do Linux ficou alerta j√° que eles teriam que fazer o versionamento do n√∫cleo do Linux em outro sistema.

Assim ent√£o a comunidade come√ßou a criar seu pr√≥prio VCS que fosse:

* Simples

* Veloz

* N√£o linear, ou seja, que aceite v√°rios ramos (branches) de modifica√ß√£o

* Capaz de lidar com grandes projetos, afinal, Linux √© gigante

E assim nasceu o Git, exatamente em 2005 e at√© hoje est√° em evolu√ß√£o sendo um dos VCS mais utilizados em todo o mundo de desenvolvimento de gambiarras (softwares).

Tip:

Ou seja, tudo nasceu de uma revolta popular

![Cachorro comuna](images/cachorro-comuna.png)



# Conceitos B√°sicos do Git

## Como o Git Funciona

O Git funciona de forma diferente de outros VCS. Em um outro VCS ele ter√° os arquivos e quando houver altera√ß√£o eles criam uma lista somente das altera√ß√µes.

Em um outro VCS ele ter√° os arquivos e quando houver altera√ß√£o eles criam uma lista somente  das altera√ß√µes:

Tip:

![Version control system basico outros vcs](images/Version-Control-System-basico-outros-vcs.png)

Agora com o Git ele faz diferente, j√° que vai tirando snapshots que s√£o como fotos quando ocorre uma mudan√ßa e caso tenha algum arquivo que n√£o foi alterado ser√° guardado uma referencia para ele, assim pode ser recuperado.

## Estrutura de Diret√≥rios

Assim temos dois n√≠veis principais:

* Diret√≥rio de trabalho

* √Årea de preparo

* Diret√≥rio `.git` que vai ser o reposit√≥rio ou banco de dados local

Tip:

![Version control system fluxodetrabalho](images/Version-Control-System-fluxodetrabalho.png)
Diret√≥rios quando se trabalha com Git



# Fluxo de Trabalho do Git

## Iniciando um Reposit√≥rio

Devemos usar o comando abaixo para iniciar o reposit√≥rio para que o Git consiga ver os arquivos.

```BASH
md MilfsGo # Cria a pasta
cd MilfsGo # acessa a pasta
git init
```

## Fazendo Altera√ß√µes

Agora vamos fazer altera√ß√µes b√°sicas como adicionar um README para o projeto.

Tip:

README s√£o arquivos geralmente em markdown (.md) para registrar a documenta√ß√£o do reposit√≥rio com informa√ß√µes importantes como:

* Nome

* Descri√ß√£o

* Como usar

* Etc

## Verificando Status

```BASH
git status
```

Tip:

![Version control system gitstatus](images/Version-Control-System-gitstatus.png)
Resultado da execu√ß√£o do comando



# Comandos Essenciais do Git

## Cheat Sheet (Tabela de pregui√ßoso)

Tip:

![American pie its not what it looks like](images/american-pie-its-not-what-it-looks-like.gif)

Essa tabela fornece uma vis√£o geral dos principais comandos Git e suas funcionalidades b√°sicas.

| Comando Git |Descri√ß√£o |
--------------------------
| `git init` |Inicializa um novo reposit√≥rio Git |
| `git add <arquivo>` |Adiciona um arquivo modificado √† √°rea de stage |
| `git add .` |Adiciona todos os arquivos modificados √† √°rea de stage |
| `git commit -m "Mensagem do commit"` |Cria um novo commit com a mensagem especificada |
| `git mv <arquivo-original> <arquivo-novo>` |Renomeia ou move um arquivo no reposit√≥rio |



# Links e Refer√™ncias

* GIT-SCM.COM. Git - Documentation. Dispon√≠vel em: [https://git-scm.com/doc](https://git-scm.com/doc).

* YOUTUBE. YouTube. Dispon√≠vel em: [https://www.youtube.com/watch?v=un8CDE8qOR8](https://www.youtube.com/watch?v=un8CDE8qOR8).

* GITLAB. GitLab Documentation. Dispon√≠vel em: [https://docs.gitlab.com/](https://docs.gitlab.com/).

* GITHUB. Git Cheat Sheet. Dispon√≠vel em: [https://education.github.com/git-cheat-sheet-education.pdf](https://education.github.com/git-cheat-sheet-education.pdf).



